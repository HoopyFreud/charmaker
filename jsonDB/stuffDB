{
    "ammo_inferno":
    {
        "Ammo":
        {
            "Name": "Inferno",
            "Description": "Deal d3 extra damage(d8 extra damage on crit)."
        }
    },
    "ammo_ill":
    {
        "Ammo":
        {
            "Name": "Ill",
            "Description": "Target must test Toughness DR14 or be unable to recover any hit points until treated by pros or with Red-juice."
        }
    },
    "ammo_armor_piercing":
    {
        "Ammo":
        {
            "Name": "Armor-piercing",
            "Description": "Ignore armor."
        }
    },
    "ammo_taginjector":
    {
        "Ammo":
        {
            "Name": "Taginjector",
            "Description": "Deal no damage but plants either a tracker or a dose of any drug/poison."
        }
    },
    "ammo_knocker":
    {
        "Ammo":
        {
            "Name": "Knocker",
            "Description": "Deal d2 damage, and target must test Toughness DR12 or be knocked out for d3 rounds."
        }
    },
    "ammo_e_pulse":
    {
        "Ammo":
        {
            "Name": "E/pulse",
            "Description": "Deal d6 extra damage against tech targets or people with 2+ cybertech."
        }
    },
    "ammo_nanotrig":
    {
        "Ammo":
        {
            "Name": "Nanotrig",
            "Description": "Target must test Presence DR14 or temporarily trigger a random Nano infestation."
        }
    },
    "ammo_frag":
    {
        "Ammo":
        {
            "Name": "Frag",
            "Description": "Deal d4 damage to up to d3 targets within close proximity of the target."
        }
    },
    "ammo_ricochet":
    {
        "Ammo":
        {
            "Name": "Ricochet",
            "Description": "Bounces around corners and cover. Hits for d6 damage with a DR16 test."
        }
    },
    "ammo_heatseekers":
    {
        "Ammo":
        {
            "Name": "Heatseekers",
            "Description": "−2DR when firing against targets that give off heat (including body heat)."
        }
    },
    "app_weianhammer":
    {
        "App":
        {
            "Name": "WEIAN-Hammer",
            "Description": "Nearby devices are triggered to perform their function, i.e. open/close unlocked doors, trigger sprinklers, start a camera recording, adjust the AC. You can trigger 5 devices as you choose over the next 5 rounds."
        }
    },
    "app_rcdovrchargr":
    {
        "App":
        {
            "Name": "RCDOvrChargr",
            "Description": "One target gets +d6 on all Agility and Strength tests for Knowledge+3 rounds."
        }
    },
    "app_noknok":
    {
        "App":
        {
            "Name": "Nok_Nok",
            "Description": "Open a nearby locked door. Failure may trigger an alarm."
        }
    },
    "app_falseflagger":
    {
        "App":
        {
            "Name": "False Flagger",
            "Description": "Fake an alarm or the location of a triggered alarm. Any response to a real alarm is delayed by 2d6 minutes."
        }
    },
    "app_sigiltag":
    {
        "App":
        {
            "Name": "SigilTag",
            "Description": "This location and nearby systems are tagged with your invisible sigil, enabling you to remotely activate Apps as if you were present. Only two locations can be tagged at the same time."
        }
    },
    "app_erase":
    {
        "App":
        {
            "Name": ">eRase",
            "Description": "Cut or copy the latest 10 minutes of stored information from any type of recording/surveillance device."
        }
    },
    "app_defencder":
    {
        "App":
        {
            "Name": "De-fenc/der",
            "Description": "Take control of a nearby turret, drone or similar defense system for d6 rounds."
        }
    },
    "app_bloodsnoot":
    {
        "App":
        {
            "Name": "Blood Snoot",
            "Description": "Tracks down an enemy hacker and deals d4 damage each round until they pass a DR12 Knowledge test or die."
        }
    },
    "app_pathmapper":
    {
        "App":
        {
            "Name": "PathMapper",
            "Description": "Uses nearby sensors, cameras and public information to create a detailed 3D map of the surrounding ~100m."
        }
    },
    "app_ctechattak":
    {
        "App":
        {
            "Name": "CTechAttak",
            "Description": "d3 nearby cybered targets lose a total of 4d10 HP."
        }
    },
    "app_beaconworm":
    {
        "App":
        {
            "Name": "beaconworm",
            "Description": "Place a tracker into a device or cybertech, enabling you to track its movements in realtime for the coming d4 weeks."
        }
    },
    "app_trolleyskipper":
    {
        "App":
        {
            "Name": "TrolleySkipper",
            "Description": "Automated defenses have trouble tracking a person of your choice and prioritize other available targets."
        }
    },
    "armor_no_armor":
    {
        "Armor":
        {
            "Name": "No armor",
            "Equipped": null
        }
    },
    "armor_styleguard":
    {
        "Armor":
        {
            "Name": "StyleGuard",
            "DamageReduction": "-d2",
            "Description": "Looks just like clothes!"
        }
    },
    "armor_rough":
    {
        "Armor":
        {
            "Name": "Rough",
            "DamageReduction": "-d4",
            "Description": "A heavy-duty jacket or full kevlar."
        }
    },
    "armor_smartwear":
    {
        "Armor":
        {
            "Name": "Smartwear",
            "DamageReduction": "-d4",
            "Description": "Equipped with Adrenachrome_HST auto-injector that fires if the wearer is Battered."
        }
    },
    "armor_combat_armor":
    {
        "Armor":
        {
            "Name": "Combat armor",
            "DamageReduction": "-d6",
            "Description": "Equipped with Adrenachrome_HST auto-injector that fires if the wearer is Battered."
        }
    },
    "armor_exosuit":
    {
        "Armor":
        {
            "Name": "Exosuit",
            "DamageReduction": "-d8",
            "Description": "Equipped with multiple customizable injectors, jump jets, motorized joints and more. Not for sale."
        }
    },
    "cyberdeck_cyberdeck":
    {
        "Cyberdeck":
        {
            "Name": "Cyberdeck",
            "Unknown":
            [
                {
                    "Field": "Slots",
                    "Entry": "Number",
                    "Value": "_k+1"
                }
            ]
        }
    },
    "cyberdeck_cyberdeck_plus":
    {
        "Cyberdeck":
        {
            "Name": "Cyberdeck+",
            "Unknown":
            [
                {
                    "Field": "Slots",
                    "Entry": "Number",
                    "Value": "_k+4"
                }
            ]
        }
    },
    "cyberware_cyberclaws":
    {
        "Cyberware":
        {
            "Name": "Retracting cyberclaws",
            "Description": "Mollies or Logans",
            "SubStuff":
            {
                "Weapon":
                {
                    "Name": "Retracting cyberclaws",
                    "Damage":
                    {
                        "Damage": "1d6",
                        "FireMode": "melee"
                    },
                    "Equipped": null
                }
            }
        }
    },
    "cyberware_mule_pocket":
    {
        "Cyberware":
        {
            "Name": "Mule pocket",
            "Description": "A cavity in your body, big enough for a SmartGun™"
        }
    },
    "cyberware_subdermal_shockers":
    {
        "Cyberware":
        {
            "Name": "Subdermal shockers",
            "Description": "Electrical conductors below the skin.",
            "SubStuff":
            {
                "Feature": 
                {
                    "FeatureText": "Deal d4 damage to anyone grabbing or hitting you in melee. +2DR to avoid electrical damage."
                }
            }
        }
    },
    "cyberware_autocamo":
    {
        "Cyberware":
        {
            "Name": "Autocamo",
            "Description": "Subdermal projection of ever-changing anti-facial-recognition patterns.",
            "DescText": "Your face is constantly shifting."
        }
    },
    "cyberware_additional_joints":
    {
        "Cyberware":
        {
            "Name": "Additional joints",
            "Description": "Extra joints in your limbs that allow you to fit into extra-small spaces.",
            "DescText": "Your joints bend at odd angles, and there are more of them than usual.",
            "SubStuff":
            {
                "Feature": 
                {
                    "FeatureText": "-2DR to all grapple-related tests."
                }
            }
        }
    },
    "cyberware_buzzeyes":
    {
        "Cyberware":
        {
            "Name": "Buzzeyes",
            "Description": "Fly-like eyes with 360-vision capabilities.",
            "DescText": "You have bulging multifaceted eyes."
        }
    },
    "cyberware_strangler":
    {
        "Cyberware":
        {
            "Name": "Strangler",
            "Description": "Filament wire hidden in a finger.",
            "SubStuff":
            {
                "Weapon":
                {
                    "Name": "Strangler",
                    "Damage":
                    {
                        "Damage": "1d6",
                        "Description": "Deals damage each round automatically when grappling.",
                        "FireMode": "melee"
                    },
                    "Equipped": null
                }
            }
        }
    },
    "cyberware_skinhard":
    {
        "Cyberware":
        {
            "Name": "Skinhard",
            "Description": "Hardened skin.",
            "DescText": "Your skin is tough and leathery.",
            "SubStuff":
            {
                "Feature": 
                {
                    "FeatureText": "-2DR armor."
                }
            }
        }
    },
    "cyberware_deserter_fangs":
    {
        "Cyberware":
        {
            "Name": "Deserter fangs",
            "Description": "Sharpened fangs inside your mouth.",
            "DescText": "You have sharp fangs.",
            "SubStuff":
            {
                "Weapon":
                {
                    "Name": "Deserter fangs",
                    "Damage":
                    {
                        "Damage": "1d6",
                        "Description": "Bite attack. 2-in-6 risk of a free attack against you when you use it.",
                        "FireMode": "melee"
                    },
                    "Equipped": null
                }
            }
        }
    },
    "cyberware_smartjack":
    {
        "Cyberware":
        {
            "Name": "SmartJack",
            "Description": "Enhanced cerebral/RCD-links enabling you to use Smart-tech to its full potential."
        }
    },
    "cyberware_muscle_ups":
    {
        "Cyberware":
        {
            "Name": "Muscle-ups",
            "Description": "Muscular augmentations. +4 carrying capacity (included).",
            "DescText": "Your muscles bulge.",
            "PropChange":
            {
                "Property": "pc_carry_max",
                "Value": "4",
                "DispName": "Carrying Capacity Increase"
            },
            "SubStuff":
            {
                "Feature": 
                {
                    "FeatureText": "+1 on tests of raw strength such as crushing, lifting, pulling."
                }
            }
        }
    },
    "cyberware_pulsewires":
    {
        "Cyberware":
        {
            "Name": "PulseWires",
            "Description": "Electrical filaments that can boost your body's performance.",
            "SubStuff":
            {
                "Feature": 
                {
                    "FeatureText": "Trigger a pulse for +1 Agility, Presence, Strength, or Toughness for 2 hours. Each Pulse costs 75 credits."
                }
            }
        }
    },
    "cyberware_bodygun":
    {
        "Cyberware":
        {
            "Name": "BodyGun",
            "Description": "A large but hidden implanted gun.",
            "SubStuff":
            {
                "Weapon":
                {
                    "Name": "BodyGun",
                    "Description": "Single-shot. Must be reloaded after every time it fires.",
                    "Damage":
                    {
                        "Damage": "2d10",
                        "FireMode": "single"
                    },
                    "Mags": 1,
                    "Equipped": null
                }
            }
        }
    },
    "cyberware_taurs":
    {
        "Cyberware":
        {
            "Name": "Taurs",
            "Description": "Horns.",
            "DescText": "You have metallic horns.",
            "SubStuff":
            {
                "Weapon":
                {
                    "Name": "Taurs",
                    "Damage":
                    {
                        "Damage": "1d4",
                        "FireMode": "melee"
                    },
                    "Equipped": null
                }
            }
        }
    },
    "cyberware_sonic_blaster":
    {
        "Cyberware":
        {
            "Name": "Sonic blaster",
            "Description": "A sonic wave emitter.",
            "SubStuff":
            {
                "Weapon":
                {
                    "Name": "Sonic blaster",
                    "Description": "Deafening sonic wave. Recharges automatically after 6 hours. Does not use ammo.",
                    "Damage":
                    {
                        "Damage": "1d6",
                        "Description": "Can hit up to d3 targets.",
                        "FireMode": "single"
                    },
                    "Equipped": null
                }
            }
        }
    },
    "cyberware_handy_bot":
    {
        "Cyberware":
        {
            "Name": "Handy bot",
            "Description": "Detachable drone hand",
            "SubStuff":
            {
                "Unit":
                {
                    "Name": "Handy bot",
                    "Description": "Detachable drone that serves as a hand. 50m range."
                }
            }
        }
    },
    "cyberware_smarthair":
    {
        "Cyberware":
        {
            "Name": "Smarthair",
            "Description": "Change hairstyle at will.",
            "DescText": "You can change your hairstyle at will."
        }
    },
    "cyberware_skinslot":
    {
        "Cyberware":
        {
            "Name": "Skinslot",
            "Description": "Hidden beneath your skin. Provides an extra App slot for your deck.",
            "SubStuff":
            {
                "Cyberdeck":
                {
                    "Name": "Skinslot",
                    "Description": "Extra app slot for another deck.",
                    "Slots": 1
                },
                "Equipped": null
            }
        }
    },
    "cyberware_skeleplating":
    {
        "Cyberware":
        {
            "Name": "Skeleplating",
            "Description": "Your skeleton is covered in a thin metal layer. You gain 10 additional HP (included).",
            "PropChange":
            {
                "Property": "pc_hp_max",
                "Value": "10",
                "DispName": "HP Increase"
            }
        }
    },
    "cyberware_brainbox":
    {
        "Cyberware":
        {
            "Name": "Brainbox",
            "Description": "Black box for your brain. As long as it remains intact at the point of death, the user's mind can be restarted in another brainbox. Cloning or otherwise getting a new body comes with additional costs and is highly illegal unless you already are rich beyond the reach of the law."
        }
    },
    "drug_red_juice":
    {
        "Drug":
        {
            "Name": "Red-juice",
            "Uses": 1,
            "Description": "Heals d10 HP once per day."
        }
    },
    "drug_adrenachrome_hst":
    {
        "Drug":
        {
            "Name": "Adrenachrome_HST",
            "Uses": 1,
            "Description": "Heal d6 HP. +1 on all abilities for d6 rounds, then -1 until rest."
        }
    },
    "drug_sunset_chalk":
    {
        "Drug":
        {
            "Name": "Sunset Chalk",
            "Uses": 1,
            "Description": "Test Toughness DR14 or be unable to use violence other than in self-defence for d10 minutes."
        }
    },
    "drug_miura":
    {
        "Drug":
        {
            "Name": "Miura",
            "Uses": 1,
            "Description": "Test Toughness DR12 or frenzy for d6 rounds, striking at random targets in range with the most effective weapon available. Attacks are DR10 and defense is DR14."
        }
    },
    "drug_rattle":
    {
        "Drug":
        {
            "Name": "Rattle",
            "Uses": 1,
            "Description": "Test Toughness DR12 or be unable to stop talking for d6 x 10 minutes. Users often open up about things they wish to keep to themselves."
        }
    },
    "drug_bullseye":
    {
        "Drug":
        {
            "Name": "Bullseye",
            "Uses": 1,
            "Description": "All tests relying on concentration, such as sniping or using Apps, are -2DR for d10 minutes."
        }
    },
    "drug_c_vortex":
    {
        "Drug":
        {
            "Name": "C/Vortex",
            "Uses": 1,
            "Description": "All tests where creativity is important, such as using Nano, are -2DR for d10 minutes."
        }
    },
    "drug_blackout":
    {
        "Drug":
        {
            "Name": "Blackout",
            "Uses": 1,
            "Description": "Test Toughness DR14 or take d6 damage and be blinded for one hour."
        }
    },
    "drug_red_pain":
    {
        "Drug":
        {
            "Name": "Red pain",
            "Uses": 1,
            "Description": "Test Toughness DR12 or take d10 damage."
        }
    },
    "drug_0sleep":
    {
        "Drug":
        {
            "Name": "0sleep",
            "Uses": 1,
            "Description": "Removes the need to sleep and rest and the negative effects of not doing so. After two days of using 0sleep, test Toughness DR8 or fall unconscious. Test again each following day with +2DR."
        }
    },
    "drug_pink_ooze":
    {
        "Drug":
        {
            "Name": "Pink Ooze",
            "Uses": 1,
            "Description": "Stimulates all pain and pleasure receptors. Toughness DR14 or all hits received during the following 5 minutes deal an additional d4 damage."
        }
    },
    "drug_vurt":
    {
        "Drug":
        {
            "Name": "Vurt",
            "Uses": 1,
            "Description": "d6 hours of powerful hallucinations shared with other users."
        }
    },
    "infestation_alien_crabs":
    {
        "Infestation":
        {
            "Name": "Alien crabs",
            "Description": "Bugs crawl beneath your skin.",
            "DescText": "Bugs are crawling beneath your skin.",
            "Trigger": "They burrow deeper, sending you to the ground, shaking with pain for d6 rounds."
        }
    },
    "infestation_rot":
    {
        "Infestation":
        {
            "Name": "Rot",
            "Description": "Skin and flesh slowly rot.",
            "DescText": "Your skin and flesh are slowly rotting.",
            "Trigger": "Large chunks of skin fall off. You take d6 damage and for the rest of the day, take an extra +2 damage from physical sources."
        }
    },
    "infestation_flora":
    {
        "Infestation":
        {
            "Name": "Flora",
            "Description": "Your skin is tinted green or purple. Plant matter grows over your wounds.",
            "DescText": "Your skin is tinted green or purple. Plant matter grows over your wounds.",
            "Trigger": "Flowers bloom from your mouth and scream violently for 10 minutes, after which they wither and die. During this time, you cannot speak and add +2DR to all your actions."
        }
    },
    "infestation_third_eye":
    {
        "Infestation":
        {
            "Name": "Third eye",
            "Description": "It does not look human, that eye in the middle of your forehead.",
            "DescText": "You have a third eye in the middle of your forehead.",
            "Trigger": "Your sight shifts to the alien eye, revealing endless spectra of colors incomprehensible to the human mind. For d6 rounds, you have -4DR on all Presence and Knowledge tests but +4DR on everything else."
        }
    },
    "infestation_gills":
    {
        "Infestation":
        {
            "Name": "Gills",
            "Description": "You can breathe under water.",
            "DescText": "You have gills on your neck.",
            "Trigger": "For d6 rounds, you cannot breathe air - test Toughness DR12 each round or suffer d4 damage."
        }
    },
    "infestation_tubes":
    {
        "Infestation":
        {
            "Name": "Tubes",
            "Description": "Thick, rubber-like hair that moves against the wind.",
            "DescText": "You have thick, rubber-like hair that moves against the wind.",
            "Trigger": "It starts to twist and turn around your face and arms, constraining you and d3 other nearby targets. +4DR to any attack or defense tests until either they break free by testing Strength DR12 or someone helps them struggle loose."
        }
    },
    "infestation_brittle_bones":
    {
        "Infestation":
        {
            "Name": "Brittle bones",
            "Description": "Your Strength counts as one less for calculating carrying capacity.",
            "Trigger": "A sudden vibration. The sound of shattering glass. Extreme pain. You take 1 point of damage for each item you are carrying.",
            "PropChange":
            {
                "Property": "pc_carry_max",
                "Value": "-1",
                "DispName": "Carrying Capacity Decrease"
            }
        }
    },
    "infestation_bloodthirst":
    {
        "Infestation":
        {
            "Name": "Bloodthirst",
            "Description": "You have to eat raw meat every 2-3 hours to survive.",
            "Trigger": "You can't control it anymore. It. Must. FEED. For d3 rounds, you can do nothing but attempt to bite or claw your way into the nearest person's main artery."
        }
    },
    "infestation_barbed_skeleton":
    {
        "Infestation":
        {
            "Name": "Bloodthirst",
            "Description": "Sharp pieces of bone pierce the skin around your joints. You need to grind them down every two weeks, or they hinder your movements.",
            "DescText": "Sharp pieces of bone pierce the skin around your joints.",
            "Trigger": "A growth spurt occurs, causing d4 damage, bleeding wounds and for the next hour, you have +2DR on all actions that require moving your limbs."
        }
    },
    "infestation_radiance":
    {
        "Infestation":
        {
            "Name": "Radiance",
            "Description": "A faint, eerie glow surrounds you. Geiger counters malfunction in your presence.",
            "DescText": "A faint, eerie glow surrounds you. Geiger counters malfunction in your presence.",
            "Trigger": "You flash brightly and deal d6 damage to yourself and up to d6 others in your close proximity."
        }
    },
    "infestation_fading":
    {
        "Infestation":
        {
            "Name": "Fading",
            "Description": "You seem to fade in and out of existence.",
            "DescText": "You seem to fade in and out of existence.",
            "Trigger": "You disappear from sight and all sensors, but you are stuck in complete darkness for d4 rounds, after which you appear in a random location up to 50m from where you were."
        }
    },
    "infestation_seed_pods":
    {
        "Infestation":
        {
            "Name": "Seed pods",
            "Description": "Pea-sized seed pockets cover most of your body.",
            "DescText": "You are covered in pea-sized seed pockets.",
            "Trigger": "Seeds shoot out of your body, weakening you for the next hour as the seeds rapidly grow back. All physical tests are +4DR for this hour."
        }
    },
    "infestation_crystalline":
    {
        "Infestation":
        {
            "Name": "Crystalline",
            "Description": "Small buds of crystal cover your body.",
            "DescText": "You are covered in small crystal buds.",
            "Trigger": "They expand, immobilizing you as the crystal covers your entire body. You are unable to move for d3 rounds, and any damage taken during this time is tripled."
        }
    },
    "infestation_nanite_echo":
    {
        "Infestation":
        {
            "Name": "Nanite echo",
            "Description": "Your eyes are yellow and red.",
            "DescText": "Your eyes are yellow and red.",
            "Trigger": "A semi-physical copy of yourself appears behind you and attempts to kill you or a nearby ally, whoever is weakest. The echo has d12 HP and deals d6 damage with its ghastly grasp."
        }
    },
    "infestation_elongated_fingers":
    {
        "Infestation":
        {
            "Name": "Elongated fingers",
            "Description": "Twice the length they used to be.",
            "DescText": "You have elongated fingers, twice the length they used to be.",
            "Trigger": "They painfully twist and bend. You are unable to use weapons or other items requiring a firm grip for the next d10 x 10 minutes."
        }
    },
    "infestation_cold":
    {
        "Infestation":
        {
            "Name": "Cold",
            "Description": "Humidity turns to frost on your cold skin.",
            "DescText": "Humidity turns to frost on your cold skin.",
            "Trigger": "Your body temperature drops, and the air around you seems to freeze. You and everyone close to you act with +2DR for the next minute."
        }
    },
    "infestation_rage":
    {
        "Infestation":
        {
            "Name": "Rage",
            "Description": "Skin pulled tight, your blood is boiling.",
            "DescText": "Your skin is tight and flushed.",
            "Trigger": "You lose control of your senses and attack anyone near you for d4 rounds. Whatever controls you prefers to use offensive Nano powers first and your fists second."
        }
    },
    "infestation_bloated_and_moist":
    {
        "Infestation":
        {
            "Name": "Bloated and moist",
            "DescText": "Your skin is bloated and moist.",
            "Trigger": "You swell up even more, and a greyish liquid seeps from your orifices. +4DR on every test for 10 minutes."
        }
    },
    "infestation_bestial_enlarged_maw":
    {
        "Infestation":
        {
            "Name": "Bestial, enlarged maw",
            "DescText": "You have a bestial, enlarged maw.",
            "Trigger": "It splits in two and grows even larger when triggered. You take d8 damage but can bite for d6 damage for the next hour."
        }
    },
    "infestation_magnetic":
    {
        "Infestation":
        {
            "Name": "Magnetic",
            "DescText": "You attract metal objects. Usually only noticeable at a few centimeters' distance from your skin.",
            "Trigger": "Small metal objects come flying towards you. Defend against metal melee weapons or bullets at +4DR for the next d6 rounds."
        }
    },
    "item_backpack":
    {
        "Item":
        {
            "Name": "Backpack",
            "Description": "Holds 7 normal-sized items.",
            "PropChange":
            {
                "Property": "pc_carry_max",
                "Value": "7",
                "DispName": "Carrying Capacity Increase"
            }
        }
    },
    "item_bio_scanner":
    {
        "Item":
        {
            "Name": "Bio/ID scanner",
            "Description": "Tracks a person within 50m."
        }
    },
    "item_breathing_mask":
    {
        "Item":
        {
            "Name": "Breathing mask",
            "Description": "Provides oxygen in gas or underwater."
        }
    },
    "item_clothes":
    {
        "Item":
        {
            "Name": "Clothes",
            "Equipped": null
        }
    },
    "item_crime_kit":
    {
        "Item":
        {
            "Name": "Crime scene kit"
        }
    },
    "item_dna_bomb":
    {
        "Item":
        {
            "Name": "DNA bomb",
            "Description": "Fills a 10m area with mixed DNA matter.",
            "Uses": 1
        }
    },
    "item_drone_suit":
    {
        "Item":
        {
            "Name": "Drone suit",
            "Description": "Combat tests +4DR when airborne. Slow, quiet flight."
        }
    },
    "item_faceblock":
    {
        "Item":
        {
            "Name": "Faceblock",
            "Description": "Blocks facial recognition and behavioral harvesting."
        }
    },
    "item_fake_id":
    {
        "Item":
        {
            "Name": "Fake ID",
            "Description": "Passes random checks, not active searches.",
            "Equipped": null
        }
    },
    "item_first_aid":
    {
        "Item":
        {
            "Name": "First-aid kit",
            "Description": "Stops bleeding/infection and heals d6 HP.",
            "Uses": 4
        }
    },
    "item_flashlight":
    {
        "Item":
        {
            "Name": "Flashlight"
        }
    },
    "item_foldable_ladder":
    {
        "Item":
        {
            "Name": "Foldable Ladder",
            "Description": "5m."
        }
    },
    "item_lighter":
    {
        "Item":
        {
            "Name": "Lighter"
        }
    },
    "item_lockpicks_electronic":
    {
        "Item":
        {
            "Name": "Lockpicks (electronic)"
        }
    },
    "item_lockpicks_physical":
    {
        "Item":
        {
            "Name": "Lockpicks (mechanical)"
        }
    },
    "item_magnesium_strip":
    {
        "Item":
        {
            "Name": "Magnesium Strip"
        }
    },
    "item_cutting_torch":
    {
        "Item":
        {
            "Name": "Micro Torch Cutter",
            "Uses": 3
        }
    },
    "item_multitool":
    {
        "Item":
        {
            "Name": "Multitool"
        }
    },
    "item_noisemaker":
    {
        "Item":
        {
            "Name": "Noisemaker",
            "Description": "Blocks remote communication and surveillance within 20m for d4 minutes.",
            "Uses": 3
        }
    },
    "item_optic_camo":
    {
        "Item":
        {
            "Name": "Optic camo suit",
            "Description": "Blocks remote communication and surveillance within 20m for d4 minutes, d3 uses."
        }
    },
    "item_paracord":
    {
        "Item":
        {
            "Name": "Paracord",
            "Description": "30m"
        }
    },
    "item_acid_bottle":
    {
        "Item":
        {
            "Name": "Bottle of Pulverized Acid",
            "Uses": 1
        }
    },
    "item_card_skimmer":
    {
        "Item":
        {
            "Name": "RFID/keycard skimmer",
            "Description": "20% cumulative chance (max 60%) of copying a keycard held close to it."
        }
    },
    "item_rcd":
    {
        "Item":
        {
            "Name": "Retinal Com Device (RCD)",
            "Description": "Beams holodata straight into your skull. Access sites, send/receive texts, pics, video feeds. Interface with technology.",
            "Equipped": null
        }
    },
    "item_scum_explosive":
    {
        "Item":
        {
            "Name": "Scum eplosive",
            "Description": "Enough for a moderately reinforced door.",
            "Uses": 1
        }
    },
    "item_silencer":
    {
        "Item":
        {
            "Name": "Silencer"
        }
    },
    "item_spray_can":
    {
        "Item":
        {
            "Name": "Spray can/marker",
            "Uses": 1
        }
    },
    "item_superglue":
    {
        "Item":
        {
            "Name": "Superglue",
            "Uses": 1
        }
    },
    "item_superlube":
    {
        "Item":
        {
            "Name": "Superlube",
            "Uses": 1
        }
    },
    "item_train_ticket":
    {
        "Item":
        {
            "Name": "CWPC Metro card",
            "Uses": 1,
            "Equipped": null
        }
    },
    "item_visionvisor":
    {
        "Item":
        {
            "Name": "Visionvisor",
            "Description": "Zoom, heat vision, night vision, ultrasound."
        }
    },
    "item_ziptie":
    {
        "Item":
        {
            "Name": "Zip ties",
            "Uses": 1
        }
    },
    "nano_benevolent_suturedroids":
    {
        "Nano":
        {
            "Name": "Benevolent suturedroids",
            "Description": "d2 people regain d10 HP each. A roll of 6 or greater comes with a free migraine.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_pineal_gland_stimulation":
    {
        "Nano":
        {
            "Name": "Pineal gland stimulation",
            "Description": "For d4 rounds, you can feel nearby data flows. You can hear a short conversation or message, sense the direction of a large data source or see the last few seconds of the most recently recorded information on a device.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_cosmic_dust_bots":
    {
        "Nano":
        {
            "Name": "Cosmic dust bots",
            "Description": "An area of up to 20m in diameter is covered in dust and darkness for the duration of a fight or for 10 rounds. It tastes like stained, rusted metal.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_psychic_scalpels":
    {
        "Nano":
        {
            "Name": "Psychic scalpels",
            "Description": "A living target of your choice tests Presence DR14 or loses d10 HP. Their eyes bleed, and their ears ring.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_bent_prism":
    {
        "Nano":
        {
            "Name": "Bent prism",
            "Description": "A person becomes invisible and attacks and defends at DR6. The effect lasts for d6 rounds or until you are hurt.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_crawling_carapace":
    {
        "Nano":
        {
            "Name": "Crawling carapace",
            "Description": "d4 targets gain -d6 armor for 4 rounds. Sometimes it feels as if this thing has a will of its own, but that's probably just your imagination.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_chill_of_the_void":
    {
        "Nano":
        {
            "Name": "Chill of the void",
            "Description": "Up to d4 targets test Toughness DR14 or take d4 damage. The next round, the test is DR16 and the damage taken is d8. In the third and fourth rounds, the test is DR16 and the damage is 2d10. Frost covers the area, and snowflakes float in the air.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_to_dust":
    {
        "Nano":
        {
            "Name": "To dust",
            "Description": "Half a cubic meter of inorganic matter turns to dust. If the target is attached to or in the hands of a conscious creature, the test to activate the power is DR14.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_dead_cell_spirits":
    {
        "Nano":
        {
            "Name": "Dead cell spirits",
            "Description": "By consuming a handful of something dead, you can relive their last moments as if through a hazy and distorted lens. Test Presence DR14 to avoid taking d6 damage from ego death.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_lifetap":
    {
        "Nano":
        {
            "Name": "Lifetap",
            "Description": "Choose two targets, one to heal and one to hurt. The healing target tests Presence DR10 to heal d6 damage, while the second target is dealt d6 damage. Failure deals both targets d3 damage. A translucent, oozing bridge of blood and energy flows between the creatures, like oil in water.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_remote_control":
    {
        "Nano":
        {
            "Name": "Remote control",
            "Description": "A target within spitting range must obey a single command. You will forever hear their wordless voice faintly echo in your mind.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "nano_swarm_trip":
    {
        "Nano":
        {
            "Name": "Swarm trip",
            "Description": "Your mind is transferred to a flying swarm of bacteria for 10 minutes. You can move through any crack or hole, and you can see whatever the swarm sees but not hear or interact with anything. If your body is killed or if you are not back at your body when the 10 minutes are up, you are stuck in the swarm forever.",
            "SubStuff":
            {
                "RandomItem": 
                {
                    "Name": "Infestation",
                    "RandomTable": "RandomInfestation"
                }
            }
        }
    },
    "unit_surveillance_drone":
    {
        "Unit":
        {
            "Name": "Fly-sized surveillance drone",
            "Description": "Equipped with a camera. 300m range. Incredibly fragile. An expected corporate espionage tool."
        }
    },
    "vehicle_old_motorcycle":
    {
        "Vehicle":
        {
            "Name": "Old-school motorcycle"
        }
    },
    "vehicle_cyberbike":
    {
        "Vehicle":
        {
            "Name": "Cyberbike"
        }
    },
    "vehicle_car":
    {
        "Vehicle":
        {
            "Name": "Car"
        }
    },
    "vehicle_van":
    {
        "Vehicle":
        {
            "Name": "Van"
        }
    },
    "vehicle_armor_car":
    {
        "Vehicle":
        {
            "Name": "Armored car"
        }
    },
    "vehicle_armor_van":
    {
        "Vehicle":
        {
            "Name": "Armed and armored van"
        }
    },
    "vehicle_octocopter":
    {
        "Vehicle":
        {
            "Name": "Octocopter"
        }
    },
    "vehicle_hovercraft":
    {
        "Vehicle":
        {
            "Name": "Small hovercraft"
        }
    },
    "vehicle_submersible":
    {
        "Vehicle":
        {
            "Name": "Submersible"
        }
    },
    "vehicle_fishing_boat":
    {
        "Vehicle":
        {
            "Name": "Fishing boat"
        }
    },
    "weapon_improv":
    {
        "Weapon":
        {
            "Name": "Broken bottle",
            "Damage":
            {
                "Damage": "1d3",
                "FireMode": ["melee","throw"]
            }
        }
    },
    "weapon_crowbar":
    {
        "Weapon":
        {
            "Name": "Crowbar",
            "Damage":
            {
                "Damage": "1d4",
                "FireMode": ["melee","throw"]
            }
        }
    },
    "weapon_taser":
    {
        "Weapon":
        {
            "Name": "Taser",
            "Damage":
            {
                "Damage": "1d2",
                "Description": "Test Toughness or fall down.",
                "FireMode": "single"
            }
        }
    },
    "weapon_shockstick":
    {
        "Weapon":
        {
            "Name": "Shockstick",
            "Damage":
            {
                "Damage": "1d4",
                "Description": "Test Toughness or fall down.",
                "FireMode": "melee"
            }
        }
    },
    "weapon_machete":
    {
        "Weapon":
        {
            "Name": "Machete",
            "Damage":
            {
                "Damage": "1d6",
                "FireMode": "melee"
            }
        }
    },
    "weapon_filament_knife":
    {
        "Weapon":
        {
            "Name": "Filament knife",
            "Damage":
            {
                "Damage": "1d6",
                "FireMode": "melee"
            }
        }
    },
    "weapon_monosword":
    {
        "Weapon":
        {
            "Name": "Monosword",
            "Damage":
            {
                "Damage": "1d8",
                "FireMode": "melee"
            }
        }
    },
    "weapon_knives":
    {
        "Weapon":
        {
            "Name": "Too many throwing knives",
            "Damage":
            {
                "Damage": "1d4",
                "Description": "Two attacks per round.",
                "FireMode": ["melee","throw"]
            },
            "Mags": 1
        }
    },
    "weapon_power_tool":
    {
        "Weapon":
        {
            "Name": "Power tool",
            "Damage":
            {
                "Damage": "1d6",
                "Description": "Breaks down on a 1.",
                "FireMode": "melee",
                "MechDamage": true
            }
        }
    },
    "weapon_chainsaw":
    {
        "Weapon":
        {
            "Name": "Chainsaw",
            "Damage":
            {
                "Damage": "1d6+1",
                "Description": "1-in-4 to hit yourself on a miss.",
                "FireMode": "melee"
            }
        }
    },
    "weapon_pneumatic_glove":
    {
        "Weapon":
        {
            "Name": "Pneumatic glove",
            "Damage":
            {
                "Damage": "1d6",
                "Description": "Ignores armor on a crit.",
                "FireMode": "melee"
            }
        }
    },
    "weapon_9mm":
    {
        "Weapon":
        {
            "Name": "9mm pistol",
            "Damage":
            {
                "Damage": "1d6",
                "FireMode": ["single","auto"]
            },
            "Mags": 1
        }
    },
    "weapon_revolver":
    {
        "Weapon":
        {
            "Name": "Ancient revolver",
            "Damage":
            {
                "Damage": "1d6",
                "FireMode": ["single","auto"]
            },
            "Mags": 1
        }
    },
    "weapon_smartgun":
    {
        "Weapon":
        {
            "Name": "Smartgun™",
            "Damage":
            [
                {
                    "Description": "Without a SmartJack",
                    "Damage": "1d6",
                    "FireMode": ["single","auto"]
                },
                {
                    "Description": "With a SmartJack",
                    "Damage": "1d10",
                    "FireMode": ["single","auto"]
                }
            ],
            "Mags": 1
        }
    },
    "weapon_smgs":
    {
        "Weapon":
        {
            "Name": "Pair of small SMGs",
            "Damage":
            {
                "Damage": "1d6",
                "FireMode": "auto"
            },
            "Mags": 1
        }
    },
    "weapon_assault_rifle":
    {
        "Weapon":
        {
            "Name": "Assault rifle",
            "Damage":
            {
                "Damage": "1d8",
                "FireMode": ["single","auto"]
            },
            "Mags": 1
        }
    },
    "weapon_assault_rifle_grenade":
    {
        "Weapon":
        {
            "Name": "Assault rifle (with grenade launcher)",
            "Damage":
            [
                {
                    "Description": "Normal fire",
                    "Damage": "1d8",
                    "FireMode": ["single","auto"]
                },
                {
                    "Description": "Grenade launcher - can hit up to d3 targets (uses grenades as ammo)",
                    "Damage": "1d6",
                    "FireMode": "single",
                    "MechDamage": true
                }
            ],
            "Mags": 1
        }
    },
    "weapon_shotgun":
    {
        "Weapon":
        {
            "Name": "Shotgun",
            "Damage":
            {
                "Damage": "1d8",
                "FireMode": "single"
            },
            "Mags": 1
        }
    },
    "weapon_sniper_rifle":
    {
        "Weapon":
        {
            "Name": "Sniper rifle",
            "Damage":
            {
                "Damage": "1d12",
                "Description": "x3 damage on crit. -4DR, +3 damage when aiming for 2 rounds.",
                "FireMode": "single"
            },
            "Mags": 1
        }
    },
    "weapon_pulse_rifle":
    {
        "Weapon":
        {
            "Name": "Pulse rifle",
            "Damage":
            {
                "Damage": "1d10",
                "FireMode": ["single","auto"],
                "MechDamage": true
            },
            "Mags": 1
        }
    },
    "weapon_nailgun":
    {
        "Weapon":
        {
            "Name": "Nailgun",
            "Damage":
            {
                "Damage": "1d6",
                "FireMode": "auto"
            },
            "Mags": 1
        }
    },
    "weapon_laser_turret":
    {
        "Weapon":
        {
            "Name": "Laser turret",
            "Damage":
            {
                "Damage": "1d12",
                "FireMode": ["single","auto","remote"],
                "MechDamage": true
            },
            "Mags": 1
        }
    },
    "weapon_rocket_launcher":
    {
        "Weapon":
        {
            "Name": "Rocket launcher",
            "Damage":
            {
                "Damage": "d12",
                "Description": "Can hit up to d4 targets. Ignores 2 points of armor. Fires once per combat.",
                "FireMode": "single",
                "MechDamage": true
            },
            "Mags": 1
        }
    },
    "weapon_grapple_crossbow":
    {
        "Weapon":
        {
            "Name": "Grappling-hook crossbow",
            "Damage":
            {
                "Damage": "d4",
                "FireMode": "single"
            }
        }
    },
    "weapon_flashbang":
    {
        "Weapon":
        {
            "Name": "Flashbang Grenade",
            "Uses": 1,
            "Damage":
            {
                "Description": "Test Toughness or +4DR for d4 rounds.",
                "FireMode": "throw"
            }
        }
    },
    "weapon_hand_grenade":
    {
        "Weapon":
        {
            "Name": "Hand Grenade",
            "Uses": 1,
            "Damage":
            {
                "Damage": "d6",
                "Description": "Can hit up to d3 targets.",
                "FireMode": "throw",
                "MechDamage": true
            }
        }
    },
    "weapon_epulse_grenade":
    {
        "Weapon":
        {
            "Name": "ePulse Grenade",
            "Uses": 1,
            "Damage":
            {
                "Damage": "d8",
                "Description": "Can hit up to d3 tech targets or people with 2+ cybertech.",
                "FireMode": "throw",
                "MechDamage": true
            }
        }
    }
}