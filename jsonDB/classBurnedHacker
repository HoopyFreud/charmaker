{
    "Name": "Burned Hacker",
    "KnowledgeRoll": "3d6+2",
    "StrengthRoll": "3d6-1",
    "ToughnessRoll": "3d6-1",
    "HPRoll": "1d6+_t",
    "WeaponRoll": "1d8",
    "ArmorRoll": "1d2",
    "StuffReplacement":
    {
        "Random Cyberware":
        {
            "RandomItem": 
            {
                "Name": "Random App",
                "RandomTable": "RandomApp"
            }
        },
        "Random Nano":
        {
            "RandomItem": 
            {
                "Name": "Random App",
                "RandomTable": "RandomApp"
            }
        }
    },
    "ClassStuff":
    [
        {
            "Cyberdeck":
            {
                "Name": "Custom cyberdeck",
                "Unknown":
                [
                    {
                        "Field": "Slots",
                        "Entry": "Number",
                        "Value": "1d4+_k"
                    },
                    {
                        "Field": "Description",
                        "Entry": "Dropdown",
                        "Value":
                        [
                            "Covered in duct tape",
                            "Covered in stickers",
                            "Covered in grime",
                            "Covered in paint",
                            "Covered in glue",
                            "Covered in glitter",
                            "Covered in doodles",
                            "Covered in spikes",
                            "Covered in emojis",
                            "Covered in cyphers",
                            "Covered in song lyrics",
                            "Covered in holomemes",
                            "Covered in scratch marks",
                            "Covered in intricate psychedelic patterns"
                        ]
                    }
                ]
            }
        },
        {
            "RandomItem": 
            {
                "Name": "Random App",
                "RandomTable": "RandomApp"
            }
        }
    ],
    "RandomClassStuffText": "You built an App:",
    "RandomClassStuff":
    {
        "1":
        {
            "App":
            {
                "Name": "Borgtrigga-0.5",
                "Damage":
                {
                    "Damage": "1d4",
                    "Description": "Victims have to test Toughness or bleed 1 HP for d6 rounds."
                }
            }
        },
        "2":
        {
            "App":
            {
                "Name": "Law1",
                "Description": "Parallaxes imagery around you, making you invisible to all tech (except true AI) for 10 minutes."
            }
        },
        "3":
        {
            "App":
            {
                "Name": "Boomboom",
                "Description": "1d4 nearby simple devices (lamps, monitors, cameras, etc.) explode.",
                "Damage":
                {
                    "Damage": "1d6",
                    "Description": "Can hit up to d4 targets."
                }
            }
        },
        "4":
        {
            "App":
            {
                "Name": "CopySwappy",
                "Description": "For d10 rounds, all tech will mistake you for another person within 30m and vice versa."
            }
        },
        "5":
        {
            "App":
            {
                "Name": "tError",
                "Description": "Target's RCD renders subliminal, personalized nightmare imagery that distorts reality. Test Presence DR14 or unable to act for d4 rounds."
            }
        },
        "6":
        {
            "App":
            {
                "Name": "DvG-sling",
                "Description": "Deal damage to a cybered target or drone/vehicle/mech based on their size.",
                "Damage":
                [
                    {
                        "Description": "Dog-sized targets",
                        "Damage": "1d6"
                    },
                    {
                        "Description": "Human-sized targets",
                        "Damage": "1d10"
                    },
                    {
                        "Description": "Car-sized targets",
                        "Damage": "2d8"
                    },
                    {
                        "Description": "Larger targets",
                        "Damage": "2d12"
                    }
                ]
            }
        },
        "7":
        {
            "App":
            {
                "Name": "MerzApp",
                "Description": "Assaults every sense with noise. Test Toughness DR16 or be blind, deaf and unable to act for d3 rounds."
            }
        }
    },
    "ClassLore": "You were one of the sharpest deckers in Cy. No one could use tech or warp the world with an App like you could. You don't know what went wrong. You messed up. Maybe you were tricked; maybe you got sloppy. You glimpsed a terrible truth, and now you're burnt. No collective, no fallback, nothing.",
    "RandomClassLorePrompt": "On a deep dive of the Cyber Cosmos, you found out the terrible truth that",
    "RandomClassLore":
    [
        "the public faces of the UCS board are fabricated. They don't exist. Who's running UCS?",
        "stealth carrier drones are offloading large amounts of something in G0 on rainy nights.",
        "rogue AI are flocking to Cy, more so than than anywhere else in the world.",
        "nanobacteria is seeping into the Net. What does that even mean? Who's covering it up?",
        "two AIs have merged into a two-headed sentience. Its intelligence is beyond our comprehension.",
        "an unknown collective has opened backdoors in Cy's major data nodes. No hackers have claimed credit.",
        "behind a specific door there are other Nets, separate from everything else. They are like different worlds."
    ]
}